# -*- coding: utf-8 -*-
"""hackathon_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLWVe2gF0buaXmcturBNupWwKA_XEepJ

#**Adwait's code**
"""

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline

# Change model_name to a public model
model_name = "google/flan-t5-base"  # Using a public model
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Load model without 4-bit quantization and without specifying device_map
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)

# Use text2text-generation pipeline for T5 models
caption_gen = pipeline("text2text-generation", model=model, tokenizer=tokenizer)

# Generate caption
caption = caption_gen("Write a meme caption about: finals week", max_length=50, do_sample=True)[0]['generated_text']
print("Caption:", caption)

#!pip install -q google-generativeai --upgrade
import google.generativeai as genai
# Replace with your Gemini API key
GOOGLE_API_KEY = "AIzaSyClZYT6QCZ1QqUDEfwYoYwi0rchpJ1lqDg"
genai.configure(api_key=GOOGLE_API_KEY)
# Use Gemini 2.0 Flash model
model = genai.GenerativeModel("models/gemini-2.0-flash")
# Input prompt
prompt = "Write a funny meme caption about: Cats are honest. You should format it as follows. Give 4 options with suggestions as Option 1: Famous meme template"\
 "Caption: and so on.., do not do any formatting like bold."
# Generate caption
response = model.generate_content(prompt)
# Print result
print("Caption:", response.text)





"""#**Aradya's code**

"""

# Step 1 + Step 2: Load a random meme template

import random
import os
from PIL import Image

# Define path to your templates folder
template_folder = '/content/templates'  # Update this path if needed

# Function to load a random template
def load_random_template():
    templates = os.listdir(template_folder)
    chosen_template = random.choice(templates)
    template_path = os.path.join(template_folder, chosen_template)
    img = Image.open(template_path)
    return img

# Example usage
if __name__ == "__main__":
    meme_img = load_random_template()
    meme_img.show()  # This will open/display the image



"""#**Rutvik's code**"""

pip install fastapi uvicorn

from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
from scipy.special import softmax
import torch
import re

# Load models
emotion_model_name = "bhadresh-savani/distilbert-base-uncased-emotion"
tokenizer = AutoTokenizer.from_pretrained(emotion_model_name)
emotion_model = AutoModelForSequenceClassification.from_pretrained(emotion_model_name)
sentiment_pipeline = pipeline("sentiment-analysis")

# Preprocessing function
def preprocess(text):
    text = re.sub(r"http\S+|@\S+|#\S+", "", text)  # Remove links, mentions, hashtags
    return text.strip().lower()

# Emotion detection function
def detect_emotions(text, top_k=3):
    inputs = tokenizer(text, return_tensors="pt", truncation=True)
    with torch.no_grad():
        outputs = emotion_model(**inputs)
    scores = softmax(outputs.logits.numpy()[0])
    label_map = emotion_model.config.id2label
    emotions_with_scores = [(label_map[i], round(float(scores[i]), 4)) for i in range(len(scores))]
    sorted_emotions = sorted(emotions_with_scores, key=lambda x: x[1], reverse=True)
    return sorted_emotions[:top_k]

# Sentiment detection function
def detect_sentiment(text):
    result = sentiment_pipeline(text)[0]
    return {
        "label": result['label'].lower(),
        "score": round(result['score'], 4)
    }

# Combined analysis function
def analyze_text(text):
    clean_text = preprocess(text)
    sentiment = detect_sentiment(clean_text)
    emotions = detect_emotions(clean_text)

    return {
        "input": text,
        "sentiment": sentiment,
        "emotions": emotions
    }

# Main function for input
def analyze_input(prompt):
    result = analyze_text(prompt)
    print("\n--- Analysis Result ---")
    print(f"Sentiment: {result['sentiment']['label']} (score: {result['sentiment']['score']})")
    print("Top Emotions:")
    for emo, score in result['emotions']:
        print(f"  â€¢ {emo.capitalize()}: {score}")

# Test with an example input
analyze_input("We will win this hackathon")